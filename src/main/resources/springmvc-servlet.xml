<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	     http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd">
        <!-- 自动扫描包，实现支持注解的IOC -->
        <context:component-scan base-package="cn.wdq"/>
        <!-- spring MVC不处理静态资源，交给默认的servlet来处理 -->
        <mvc:default-servlet-handler/>
        <!-- 支持mvc注解驱动 -->
        
        <mvc:annotation-driven>
        	<mvc:message-converters register-defaults="true">  
		        <bean class="org.springframework.http.converter.StringHttpMessageConverter">  
		            <constructor-arg value="UTF-8"/>  
		            <property name="writeAcceptCharset" value="false"/>  
		        </bean>  
		    </mvc:message-converters>
        </mvc:annotation-driven>
    <bean id="viewResolver"
          class="org.springframework.web.servlet.view.UrlBasedViewResolver">
        <property name="viewClass"
                  value="org.springframework.web.servlet.view.JstlView"/>
        <property name="prefix" value="/"/>
        <property name="suffix" value=".html"/>
    </bean>
    <!--属性占位文件引入，可以通过${属性名}获得属性文件中的内容-->
    <context:property-placeholder location="classpath:dbconfig.properties"/>
    <!--连接池配置-->
    <bean name = "transactionManager" class ="org.springframework.jdbc.datasource.DataSourceTransactionManager" >
        <property name="dataSource" ref="dataSource"></property >
    </bean >
    <bean id = "propertyConfigurer" class ="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer" >
        <property name = "locations" >
            <list>
                <value>classpath:dbconfig.properties</value >
            </list >
        </property >
    </bean >
    <!-- 阿里 druid 数据库连接池 -->
    <bean id = "dataSource" class = "com.alibaba.druid.pool.DruidDataSource" destroy-method = "close" >
        <!-- 数据库基本信息配置 -->
        <property name = "url" value = "${url}" />
        <property name = "username" value = "${jdbc.username}" />
        <property name = "password" value = "${password}" />
        <property name = "driverClassName" value = "${driverClassName}" />
        <property name = "filters" value = "${filters}" />
        <!-- 最大并发连接数 -->
        <property name = "maxActive" value = "${maxActive}" />
        <!-- 初始化连接数量 -->
        <property name = "initialSize" value = "${initialSize}" />
        <!-- 配置获取连接等待超时的时间 -->
        <property name = "maxWait" value = "${maxWait}" />
        <!-- 最小空闲连接数 -->
        <property name = "minIdle" value = "${minIdle}" />
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name = "timeBetweenEvictionRunsMillis" value ="${timeBetweenEvictionRunsMillis}" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name = "minEvictableIdleTimeMillis" value ="${minEvictableIdleTimeMillis}" />
        <property name = "validationQuery" value = "${validationQuery}" />
        <property name = "testWhileIdle" value = "${testWhileIdle}" />
        <property name = "testOnBorrow" value = "${testOnBorrow}" />
        <property name = "testOnReturn" value = "${testOnReturn}" />
        <property name = "maxOpenPreparedStatements" value ="${maxOpenPreparedStatements}" />
        <!-- 打开 removeAbandoned 功能 -->
        <property name = "removeAbandoned" value = "${removeAbandoned}" />
        <!-- 1800 秒，也就是 30 分钟 -->
        <property name = "removeAbandonedTimeout" value ="${removeAbandonedTimeout}" />
        <!-- 关闭 abanded 连接时输出错误日志 -->
        <property name = "logAbandoned" value = "${logAbandoned}" />
    </bean >
    <!--2创建一个sql会话工程bean，指定数据源-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/><!--指定数据源-->
        <property name="typeAliasesPackage" value="cn.wdq.entities"/>
        <property name="mapperLocations" value="classpath:/mapper/*Mapper.xml"/><!--这里可以用占位符*-->
    </bean>
    <!--创建一个sqlSession对象-->
    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg index="0" ref="sqlSessionFactory" />
    </bean>
    <!--创建一个DAO的Impl对象-->
    <bean id="uIDImpl" class="cn.wdq.dao.UIDImpl">
        <property name="sqlSession" ref="sqlSession"></property>
    </bean>
    <bean id="adminDAOImpl" class="cn.wdq.dao.AdminDAOImpl">
        <property name="sqlSession" ref="sqlSession"></property>
    </bean>
    <bean id="resDAOImpl" class="cn.wdq.dao.ResDAOImpl">
        <property name="sqlSession" ref="sqlSession"></property>
    </bean>
    <bean id="indexDAOImpl" class="cn.wdq.dao.IndexDAOImpl">
        <property name="sqlSession" ref="sqlSession"></property>
    </bean>
    <bean id="blogInfoDAOImpl" class="cn.wdq.dao.BlogInfoDAOImpl">
        <property name="sqlSession" ref="sqlSession"></property>
    </bean>
    <bean id="commonDAOImpl" class="cn.wdq.dao.CommonDAOImpl">
        <property name="sqlSession" ref="sqlSession"></property>
    </bean>
    <!--自动扫描映射接口-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--指定sql会话工厂，在上面配置过的-->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
        <!--指定基础包，即自动扫描cn.wdq.mapping这个包以及他的子包下所有的映射接口类-->
        <property name="basePackage" value="cn.wdq.mapping"></property>
    </bean>
    <!-- 拦截器 -->
        <mvc:interceptors>  
            <!-- 多个拦截器，顺序执行 -->
            <mvc:interceptor>
                <mvc:mapping path="home/**"/>
                <bean class="cn.wdq.common.interceptor.LoginInterceptor">
                </bean>
            </mvc:interceptor>
            <!--判断是否为管理员的拦截器-->
            <mvc:interceptor>
                <mvc:mapping path="/**/*.html"/>
                <mvc:exclude-mapping path="/login.html"/>
                <mvc:exclude-mapping path="/login_error.html"/>
                <mvc:exclude-mapping path="/home/user/**" />
                <bean class="cn.wdq.common.interceptor.IsAdminInterceptor">
                </bean>
            </mvc:interceptor>
        </mvc:interceptors>
    
</beans>
